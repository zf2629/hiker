海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@一级动态分类改@{"firstHeader":"class","last_chapter_rule":"","title":"一级动态分类改","author":"zetalpha","url":"hiker://empty##fypage","version":3,"col_type":"movie_3","class_name":"","type":"video","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d=[];\nconst page = MY_PAGE;\naddListener(\"onClose\",\n  $.toString(() => {\n    clearMyVar('mode');\n  })\n);\nif (page == 1) {\n    d.push({col_type: 'line'});\n   d.push({\n col_type: \"avatar\",\n img:'https://ghproxy.net/https://raw.githubusercontent.com/ls125781003/tubiao/main/messy/113.svg',\n title:'二级设置',\n url:\"hiker://page/erji?rule=\"+ MY_RULE.title,\n});\nd.push({col_type: 'line'});\nd.push({\n col_type: \"text_icon\",\n title:'输入完毕之后要点击一下右边绿色部分',\n img:'https://ghproxy.net/https://raw.githubusercontent.com/ls125781003/tubiao/main/system/7.png',\n url:'hiker://empty',\n});\n  d.push({\n    title: '\\t' + getMyVar('折叠状态', '展开'),\n    img: getMyVar('折叠状态', '展开') == '展开' ? 'https://ghproxy.net/https://raw.githubusercontent.com/ls125781003/tubiao/main/system/2.png' : 'https://ghproxy.net/https://raw.githubusercontent.com/ls125781003/tubiao/main/system/1.png',\n    col_type: 'text_icon',\n    url: $('#noLoading#').lazyRule((t) => {\n      var st = getMyVar('折叠状态', '展开');\n      if (st == \"展开\") {\n        putMyVar('折叠状态', '折叠');\n        var clsx = findItemsByCls(t+'Options');\n        storage0.putMyVar('clsx', clsx);\n        deleteItemByCls(t+'Options');\n      } else {\n        putMyVar('折叠状态', '展开');\n        var clsx = storage0.getMyVar('clsx', []).map(x => {\n          x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\n          return x;\n        });\n        addItemAfter(t+'addres', clsx);\n      }\n      updateItem(t+'exp', {\n        title: '\\t' + getMyVar('折叠状态', '展开'),\n        img: getMyVar('折叠状态', '展开') == '展开' ? 'https://ghproxy.net/https://raw.githubusercontent.com/ls125781003/tubiao/main/system/2.png' : 'https://ghproxy.net/https://raw.githubusercontent.com/ls125781003/tubiao/main/system/1.png',\n      })\n\n      //refreshPage();\n      return 'hiker://empty';\n    },MY_RULE.title),\n    extra: {\n      id:MY_RULE.title+'exp',\n    }\n  })\n\n  var st = getMyVar('折叠状态', '展开');\n\n  d.push({\n    title: '网址',\n    col_type: 'input',\n    url: $.toString((page) => {\n      toast('加载网页中...');\n      var url = input.replace('fypage', page)\n      var html = fetch(url);\n      putMyVar('html', html);\n      setItem('url', url);\n      putMyVar('url', url);\n      \n      clearMyVar(\"head.cate\")\n      toast(url);\n      refreshPage();\n    }, page),\n    extra: {\n      id: MY_RULE.title+'addres',\n      onChange: $.toString(() => {putMyVar(\"url\", input); }),\n      defaultValue: getMyVar(\"url\", \"\") ,\n      //defaultValue: getItem('url', \"\"),\n     // onChange: $.toString(() => {putMyVar('url', input)  })\n    }\n  })\n}\n\n\nlet html = getMyVar(\"html\", \"\");\nlet url = getItem('url', \"\");\n\n\nvar 定义 = {\n  分类颜色: { value: getMyVar('分类颜色', 'red') },\n  大类定位: { value: getMyVar('大类定位', '') },\n  拼接分类: { value: getMyVar('拼接分类', ''),desc:'多个按按;隔开' },\n  小类定位: { value: getMyVar('小类定位', 'body&&a:not(:matches(首页))') },\n  分类标题: { value: getMyVar('分类标题', 'a&&Text') },\n  分类链接: { value: getMyVar('分类链接', 'a&&href') },\n  一级分类处理: {\n    value: getMyVar(\"一级分类处理\", $.toString(() => {\n      let u = input;\n      //log(u);\n      return u;\n    }))\n  }\n}\n\nvar opts = [];\nif (page == 1) {\n  Object.entries(定义).forEach(function ([key, obj]) {\n    if (key == \"一级分类处理\") {\n      key = \"一级处理\";\n    }\n\n    opts.push({\n      title: key,\n      col_type: 'input',\n      desc: obj.desc,\n      url: $.toString((key) => {\n        if (!input && key != '拼接分类') return 'toast://输入为空';\n        if (key == \"一级处理\") {\n          \n        }\n        if (key == \"分类颜色\") {\n          let all_cols = [':随机颜色']\n          all_cols.unshift('当前' + ':' + input)\n          return $(all_cols, 1, '分类颜色').select(() => {\n            var r = input.split(':')[1];\n            putMyVar('分类颜色', r);\n            refreshPage(false);\n            return 'hiker://empty'\n          })\n        }\n\n        putMyVar(key, input);\n        refreshPage()\n        return 'toast://' + key + \":\" + input;\n      }, key),\n      extra: {\n        onChange:$.toString((k)=>{\n          if(k=='一级处理'){\n            putMyVar('一级分类处理',input)\n          }\n        },key),\n        cls: MY_RULE.title+'Options',\n        defaultValue: obj.value,\n        highlight: key=='一级处理'?true:false,\n        type: 'textarea',\n        height: -1,\n      }\n    })\n  });\n}\n\nif (st == \"展开\") {\n  d = d.concat(opts);\n} else {\n  storage0.putMyVar('clsx', opts);\n}\n\nif (page == 1) {\n  d.push({\n    title: '列表规则',\n    desc: '列表 标题 图片 描述 链接 ;号隔开',\n    col_type: 'input',\n    url: $.toString(() => {\n      if (!input) return 'toast://输入为空';\n      storage0.putMyVar(\"lists\", input)\n      refreshPage(false);\n      return 'toast://' + input;\n    }),\n    extra: {\n      defaultValue: storage0.getMyVar(\"lists\", \"\"),\n      type: 'textarea',\n      height: -1,\n    }\n  }, {\n    title: '下一页',\n    desc: '下一页pd或者pdfh',\n    col_type: 'input',\n    url: $.toString(() => {\n      let all_cols = ['空::', '例1::pd(html,\"a:matches(下[一]?页)&&href\")', '例2::pd(html,\"a:matches(>)&&href\")','例3::pd(html,\"a[title=下一页]&&href\")'];\n      all_cols.unshift('当前' + '::' + input)\n      return $(all_cols, 1, '下一页规则').select(() => {\n        var r = input.split('::')[1];\n        log(r)\n        storage0.putMyVar('下一页', r);\n        refreshPage(false);\n        return 'hiker://empty'\n      })\n    }),\n    extra: {\n      defaultValue: storage0.getMyVar(\"下一页\", \"\"),\n      type: 'textarea',\n      height: -1,\n    }\n  })\n}\n\n\nfor (var propName in 定义) {\n  eval('var ' + propName + ' = 定义[propName][\"value\"];');\n}\n\nvar getRangeColors = function () {\n  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\n}\n\nif (分类颜色 == \"随机颜色\") {\n  分类颜色 = getRangeColors();\n}\n\nif (page == 1) {\n  d.push({\n    title: '预览',\n    col_type: 'flex_button',\n    url: $('#noLoading#').lazyRule(() => {\n      putMyVar('折叠状态', '折叠');\n      putMyVar('mode', 'Pre');\n      clearMyVar('yi_firstpage');\n      clearMyVar(MY_RULE.url);\n      clearMyVar(\"head.cate\");\n      refreshPage()\n      return 'toast://预览'\n    })\n  }, {\n    title: '取消',\n    col_type: 'flex_button',\n    url: $('#noLoading#').lazyRule(() => {\n      clearMyVar('mode')\n      refreshPage()\n      return 'toast://取消预览'\n    })\n  },{\n    title:'列表',\n    col_type:'flex_button',\n    url:$('hiker://empty##').rule(()=>{\n      addListener(\"onClose\",\n       $.toString(() => {\n         clearMyVar('listi');\n         //refreshPage();\n        })\n      );\n      \n      var d=[];\n      var rlist=[];\n      d.push({\n        title:'确认修改并返回',\n        img:'https://hikerfans.com/tubiao/messy/179.svg',\n        url:$('#noLoading#').lazyRule(()=>{\n          back(true);\n          return 'hiker://empty';\n        }),\n        col_type:'avatar',\n      })\n      var listrule = storage0.getMyVar(\"lists\", \"\");\n\t    \n      if (listrule != \"\" && listrule.includes(\";\")){\n        rlist = listrule.split(';');\n      }\n\t  log(rlist);\n      var listurl=getMyVar('listurl','');\n      var url=getMyVar('url', '');\n      if(listurl!=''){\n        url=listurl;\n      }\n      MY_URL=url;\n      d.push({\n        title:'网址',\n        col_type:'input',\n        url:$.toString(()=>{\n          toast('获取网页中...');\n          var html=fetch(input);\n          putMyVar('listurl',input);\n          putMyVar('listhtml',html);\n          refreshPage();\n          return \"hiker://empty\";\n        }),\n        extra:{\n          defaultValue:url,\n        }\n      })\n      var html=getMyVar('html','');\n      var listhtml=getMyVar('listhtml','');\n      if(html==''&&listhtml==''){\n        html=fetch(url);\n        toast('获取网页中...');\n        putMyVar('listhtml',html);\n      }else if(listhtml!=''){\n        html=listhtml;\n      }\n      \n      var ts=['列表','标题','图片','描述','链接'];\n      ts.forEach((item,i)=>{\n        d.push({\n          title:item,\n          col_type:'input',\n          url:$.toString((ts,rl,i)=>{\n            rl[i]=input;\n            storage0.putMyVar(\"lists\", rl.join(';'));\n            refreshPage(false);\n            return 'toast://'+ts[i]+':'+input;\n          },ts,rlist,i),\n          extra:{\n            defaultValue:rlist[i]\n          }\n        })\n      })\n      \n      var list = pdfa(html, rlist[0]);\n      var index=getMyVar('listi','');\n      \n      if(index!=''){\n        var tsobj={\n         title:pdfh(list[index],rlist[1]),\n         desc:pdfh(list[index],rlist[3]),\n         img:pd(list[index],rlist[2])+'@Referer=',\n         url:pd(list[index],rlist[4]),\n        }\n        \n        d.push({\n          title:tsobj.title,\n          desc:tsobj.desc,\n          img:tsobj.img,\n          url:tsobj.url,\n          col_type:'movie_1_vertical_pic',\n        })\n        \n        d.push({\n          desc:'调试窗口',\n          col_type:'input',\n          extra:{\n            defaultValue:list[index],\n            titleVisible: false,\n            type:'textarea',\n            highlight: true,\n            height:-1,\n          }\n        })\n      }\n      \n      d.push({\n          title:'““””'+(index==''?'All'.fontcolor('#3CB371'):'All'),\n          col_type:'flex_button',\n          url:$('#noLoading#').lazyRule(()=>{\n            clearMyVar('listi');\n            refreshPage(false);\n            setPageTitle('全部');\n            return 'toast://全部';\n          })\n      })\n      \n      list.forEach((item,i)=>{\n        d.push({\n          title:'““””'+(index!=''&&parseInt(index)==i?(i+'').fontcolor('#3CB371'):i),\n          col_type:'flex_button',\n          url:$('#noLoading#').lazyRule((i)=>{\n            putMyVar('listi',i+'');\n            refreshPage(false);\n            setPageTitle('第'+i+'个');\n            return 'toast://当前调试第'+i+'个';\n          },i)\n        })\n      })\n      \n      if(index==''){\n      for (var i in list) {\n      var img = pd(list[i], rlist[2]) + \"@Referer=\";\n        d.push({\n         title: pdfh(list[i], rlist[1]),\n         img: img,\n         desc: pdfh(list[i], rlist[3]),\n         url: pd(list[i], rlist[4]),\n         extra: {\n           img: img\n          }\n         })\n        }\n       } \n      \n      setResult(d);\n    }),\n  }, {\n    title: '生成',\n    col_type: 'flex_button',\n    url: $('#noLoading#').lazyRule(() => {\n      var 处理 = getMyVar('一级分类处理', '');\n      处理 = 处理.replace(/[\\r\\n](\\(\\))/, '$1').replace(/[\\r\\n]\\)\\(\\)$/m, \")\");\n      var list = \"\";\n      var listrule = storage0.getMyVar(\"lists\", \"\");\n      if (listrule != \"\" && listrule.includes(\";\")) {\n        var rlist = listrule.split(';');\n        var list = `\nvar list = pdfa(html,\"${rlist[0]}\");\nfor (var i in list) {\n  var img = pd(list[i], \"${rlist[2]}\") + \"@Referer=\";\n  d.push({\n      title: pdfh(list[i], \"${rlist[1]}\"),\n      img: img,\n      desc: pdfh(list[i], \"${rlist[3]}\"),\n      url: \"hiker://page/detail#immersiveTheme##autoCache#?actual_url=\"+pd(list[i], \"${rlist[4]}\"),\n      extra: {\n        img: img,\n\t\t  data: { bt:标题,ms:描述,tp:图片,jj:简介,xllb:线路列表,xllbmc:线路列表名称,bflb:播放列表,bflbmc:播放列表名称,bq:url_prefix},\n      }\n    })\n  }`\n      }\n      var trueurl = \"\";\n      var auto = \"\";\n      var next = \"\";\n      if (getMyVar(\"下一页\", \"\") != \"\") {\n        trueurl = `eval(JSON.parse(request('hiker://page/autoPage')).rule); \nlet true_url = getTruelink(MY_RULE.url, MY_URL,page);`\n        auto = \"autoPage();\"\n        next = `const 下一页='${getMyVar(\"下一页\", \"\")}';`\n      } else {\n        trueurl = \"let true_url = getMyVar(MY_RULE.url, MY_URL);\"\n      }\n      var color = `${getMyVar('分类颜色', 'red')}`\n      if (color == \"随机颜色\") {\n        color = `getRangeColors()`;\n      } else {\n        color = `\"${getMyVar('分类颜色', 'red')}\"`\n      }\n\n      var str = `js:\nvar d = [];\nvar getRangeColors = function() {\n  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\n}\nconst page = MY_PAGE;\nconst 分类颜色 = ${color};\nconst 大类定位 = \"${getMyVar('大类定位', '')}\";\nconst 拼接分类 = \"${getMyVar('拼接分类', '')}\";\nconst 小类定位 = \"${getMyVar('小类定位', 'body&&a:not(:matches(首页))')}\";\nconst 分类标题 = \"${getMyVar('分类标题', 'a&&Text')}\";\nconst 分类链接 = \"${getMyVar('分类链接', 'a&&href')}\";\nconst 一级分类处理 = $.toString${处理};\nconst 标题 = '${getMyVar('r3', '')}';\nconst 描述 = \"${getMyVar('r4', '')}\";\nconst 图片 = \"${getMyVar('r5', '')}\";\nconst 简介 = \"${getMyVar('r6', '')}\";\nconst 线路列表 = \"${getMyVar('r7', '')}\";\nconst 线路列表名称 = \"${getMyVar('r8', '')}\";\nconst 播放列表 = \"${getMyVar('r9', '')}\";\nconst 播放列表名称 = \"${getMyVar('r10', '')}\";\nconst url_prefix = \"${getMyVar('bq', '')}\";\n${next}\nMY_URL = MY_URL.replace('hiker://empty##', '');\n${trueurl}\nlog(true_url);\nvar html=fetch(true_url);\nMY_URL=true_url;\neval(JSON.parse(request('hiker://page/dtfl')).rule);\n${list}\n${auto}\nsetResult(d);`\n      var rule = MY_RULE;\n      const now = new Date();\n      var time = `${now.getMonth() + 1}-${now.getDate()}`;\n      rule.title = '测试' + time;\n      rule.url = 'hiker://empty##' + getMyVar('url', '');\n      log(rule.url)\n      rule.find_rule = str;\n      return \"rule://\" + base64Encode(\"海阔视界￥home_rule￥\" + JSON.stringify(rule));\n    }),\n  }, {\n    title: '删除',\n    col_type: 'flex_button',\n    url: $('#noLoading#').lazyRule(() => {\n      let all_cols = listMyVarKeys();\n      let tips = '请选择删除临时变量 ';\n      return $(all_cols, 2, tips).select(() => {\n        clearMyVar(input);\n        refreshPage(true);\n        return 'toast://已删除临时变量:' + input;\n      });\n    }),\n  },{\n    title: \"来个示例\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n putMyVar('url', \"https://www.laodifang.tv/vodshow/1--------1---.html\");      \n putMyVar(\"大类定位\", \"body&&.head_menu_a\");\n\t\tputMyVar(\"拼接分类\", \"body&&.wrapper_fl\");\n\t\tputMyVar(\"lists\", \"body&&.vodlist_item;a&&title;a&&data-original;.pic_text&&Text;a&&href\");\n\t\t\trefreshPage();\n        return \"hiker://empty\"\n    }),\n    col_type: \"flex_button\",\n  \n  })\n}\n\nvar mode = getMyVar(\"mode\", \"\");\neval(JSON.parse(request('hiker://page/autoPage')).rule);\n\nlet 下一页 = \"\";\nif (getMyVar(\"下一页\", \"\") != \"\") {\n  下一页 = getMyVar(\"下一页\", \"\")\n}\nvar 动态返回=false;\n//var 开启折叠=false;\n\nlet true_url = '';\nif (mode == 'Pre') {\n  if (下一页 != \"\") {\n    true_url = getTruelink(MY_RULE.url, url, page);\n  } else {\n    true_url = getMyVar(MY_RULE.url, url);\n  }\n  log('true_url:'+true_url);\n  MY_URL = true_url;\n  html = fetch(true_url);\n} else {\n  MY_URL = url;\n}\nlog('MY_URL: ' + MY_URL);\ntry {\n  if (大类定位 == '') {\n    toast('当前大类定位为空将不会执行')\n  } else {\n    eval(JSON.parse(request('hiker://page/dtfl')).rule)\n  }\n} catch (e) {\n  toast(e.message)\n}\n\nvar listrule = storage0.getMyVar(\"lists\", \"\");\nif (listrule != \"\" && listrule.includes(\";\")) {\n  var rlist = listrule.split(';');\n  //log(rlist);\n  var list = pdfa(html, rlist[0]);\n  for (var i in list) {\n    var img = pd(list[i], rlist[2]) + \"@Referer=\";\n    d.push({\n      title: pdfh(list[i], rlist[1]),\n      img: img,\n      desc: pdfh(list[i], rlist[3]),\n\n     url: pd(list[i], rlist[4]),\n      extra: { img: img\n      }\n    })\n  }\n}\nif (下一页 != \"undefined\"&&下一页!='') {\n  autoPage();\n}\n\nsetResult(d);","search_url":"","group":"#️⃣工具","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"自动下一页\",\"path\":\"autoPage\",\"rule\":\"js:\\nvar 状态 =\\r\\ntypeof 状态标记 != \\\"undefined\\\" && 状态标记 != \\\"\\\" ? 状态标记: MY_RULE.url;\\n\\nfunction getTruelink(mark, url, page) {\\r\\n  var p = getMyVar(mark, url).replace(\\\"fypage\\\", page);\\r\\n  if (page == 1) {\\r\\n    return getMyVar(\\\"yi_firstpage\\\", p);\\r\\n  } else if (p != \\\"\\\") {\\r\\n    return p;\\r\\n  } else {\\r\\n    return url;\\r\\n  }\\r\\n}\\n\\nfunction autoPage() {\\r\\n  if (page == 1) {\\r\\n    putMyVar(\\\"yi_firstpage\\\", true_url);\\r\\n  }\\r\\n  try {\\r\\n    var next = eval(下一页);\\r\\n    //log(\\\"next\\\");\\r\\n    //log('next:'+next);\\r\\n  } catch {\\r\\n    log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\r\\n    next = \\\"\\\";\\r\\n  }\\r\\n  if (next != \\\"\\\") {\\r\\n    putMyVar(状态, next);\\r\\n  }\\r\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类改\",\"path\":\"dtfl\",\"rule\":\"js:\\n/*\\nVer 2023-10-28 1.0\\n备注：不要用海阔代码格式化 内容会出错\\n必须参数：\\n分类颜色 大类定位 \\n小类定位 分类标题 分类链接\\nhtml =>源码 page =>页码\\n可选参数：\\n拼接分类 折叠标记 展开标记 排除\\n大类链接 大类标题 清除键 开启折叠\\n附加定位\\n说明：\\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\\n魔改:α\\n*/\\n\\nlet empty = \\\"hiker://empty\\\";\\nlet categories = [];\\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n    if (拼接分类.includes(';')) {\\n        拼接分类 = 拼接分类.split(';');\\n    }\\n    if (拼接分类.constructor == Array) {\\n        拼接分类.forEach(item => {\\n            categories = categories.concat(pdfa(html, item));\\n        })\\n    } else {\\n        categories = [pdfa(html, 大类定位).join('\\\\n')].concat(pdfa(html, 拼接分类));\\n    }\\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\\n        附加定位.forEach(x => {\\n            var 一级 = pdfa(html, x.一级定位).map(s => {\\n                var 定位 = pdfa(s, x.小类).map(q => {\\n                    var title = pdfh(q, x.标题);\\n                    var url = 'a'\\n                    if (x.链接.includes('@@')) {\\n                        state = x.链接.split('@@')[0]\\n                        value = pdfh(q, x.链接.split('@@')[1]);\\n                        if (x.转换 == true) {\\n                            return `<li data-type=\\\"${state}\\\" data-val=\\\"${value}\\\"><a href=\\\"\\\">${title}</a></li>`\\n                        } else {\\n                            return `<a type=\\\"@extra\\\" state=\\\"${state}\\\" value=\\\"${value}\\\">${title}</a>`;\\n                        }\\n                    } else {\\n                        href = pd(q, x.链接);\\n                        return `<a href=\\\"${href}\\\">${title}</a>`;\\n                    }\\n                });\\n                return 定位;\\n            });\\n            categories.push(一级.join('\\\\n'));\\n        });\\n    }\\n} else {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n}\\n\\nlet items = [];\\nlet cates = [];\\nlet init_cate = new Array(20).fill(\\\"0\\\");\\nconst fold = getMyVar(MY_RULE.group, \\\"0\\\");\\nconst cate_temp = JSON.parse(getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate)));\\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\\\"#FF0000\\\");\\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\\\"#1aad19\\\");\\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\\n\\nvar _动态返回=true;\\nif(typeof 动态返回!='undefined'&&typeof 动态返回 === \\\"boolean\\\"){\\n    _动态返回=动态返回;\\n}\\n\\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\\n全清.unshift('yi_firstpage');\\n\\n\\nif (parseInt(page) === 1) {\\n    if (搜索) {\\n        d.push({\\n            title: \\\"\\\",\\n            url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n            desc: \\\"搜索关键词\\\",\\n            col_type: \\\"input\\\",\\n            extra: {\\n                defaultValue: getMyVar('keyword', ''),\\n                onChange: $.toString(() => {\\n                    putMyVar('keyword', input);\\n                })\\n            }\\n        })\\n    }\\n    if (page == 1 ) {\\n    if (折叠状态) {\\n          items.push({\\n                title: fold === '1' ? 折叠 : 展开,\\n                url: $(\\\"#noLoading#\\\").lazyRule((title, fold, u, all, exps) => {\\n                    var fold = getMyVar(MY_RULE.group, fold);\\n                    if(getMyVar('cate_empty','empty')=='empty'){\\n                      return 'toast://拼接部分为空';\\n                    }\\n                    \\n                    var [展开, 折叠] = exps;\\n                    if (fold == 1) {\\n                        var cx = findItemsByCls(title + 'cate_button');\\n                        storage0.putMyVar('cate_button', cx);\\n                        deleteItemByCls(title + 'cate_button');\\n                    } else {\\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                            return x;\\n                        });\\n                        addItemAfter(title + 'cate_line', cx)\\n                    }\\n                    /*all.forEach((item) => {\\n                      clearMyVar(item);\\n                    });*/\\n                    updateItem(title + 'cate_exp', {\\n                        title: fold == 1 ? 展开 : 折叠,\\n                    })\\n                    putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n                    return \\\"hiker://empty\\\";\\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\\n                col_type: 'scroll_button',\\n                extra: {\\n                    id: MY_RULE.title + 'cate_exp',\\n                    longClick: [{\\n                        title: '清除状态',\\n                        js: $.toString((x, all, cl) => {\\n                            clearMyVar(x);\\n                            clearMyVar('head.cate');\\n                            all.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            cl.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            refreshPage();\\n                        }, 状态, 全清, 清除)\\n                    }]\\n                }\\n            })\\n    }else{\\n       var bo=JSON.parse(getMyVar('head.cate','[]')).every(x=>x===\\\"0\\\");\\n       if(!bo){\\n       items.push({\\n         title:'““””'+'♻'.fontcolor('#3CB371'),\\n         col_type:'scroll_button',\\n         url:$('#noLoading#').lazyRule((x, all, cl)=>{\\n           clearMyVar(x);\\n           clearMyVar('head.cate');\\n           all.forEach((item) => {\\n             clearMyVar(item)\\n          })\\n            cl.forEach((item) => {\\n             clearMyVar(item)\\n           })\\n           refreshPage(false);\\n           return 'hiker://empty';\\n         }, 状态, 全清, 清除),\\n       })\\n      }}\\n    }\\n    let setTitle = (k, i, t) => {\\n        return k == i ? \\\"““””\\\" + t.fontcolor(分类颜色) : t\\n    }\\n    categories.forEach((category, index) => {\\n        let sub_categories = [];\\n        if (小类定位.includes(';')) {\\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\\n            if (sub_categories.length == 0) {\\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\\n            }\\n        } else {\\n            sub_categories = pdfa(category, 小类定位);\\n        }\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\\n\\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\\n\\n                let title = pdfh(item, _大类标题);\\n                if (typeof (排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                }\\n                let params = {\\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\\n                }\\n\\n                let url = pd(item, _大类链接);\\n                if (大类处理) {\\n                    //log(一级分类处理)\\n                    //log($.stringify(一级分类处理))\\n                    let input = url;\\n                    eval(\\\"result = \\\" + 一级分类处理);\\n                    //log(result)\\n                    url = result;\\n                }\\n                items.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    col_type: 'scroll_button',\\n                    url: $(url + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = [];\\n                        params.clears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                        putMyVar(params.state, input);\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params)\\n                });\\n            });\\n            items.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    id: MY_RULE.title + 'cate_line',\\n                }\\n            })\\n        } else {\\n            sub_categories.forEach((item, key) => {\\n                var extrapos = false;\\n                if (item.includes('type=\\\"@extra\\\"')) {\\n                    extrapos = true;\\n                    //log('附加定位')\\n                }\\n\\n                if (extrapos) {\\n                    var title = pdfh(item, 'a&&Text');\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n                    var json = {\\n                        type: pdfh(item, 'a&&state'),\\n                        value: pdfh(item, 'a&&value'),\\n                    }\\n                } else {\\n\\n                    var title = pdfh(item, 分类标题);\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n\\n                    var json = '';\\n                    switch (true) {\\n                        case 分类链接.includes('@@@'):\\n                            json = {\\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\\n                            }\\n                            break;\\n                        case 分类链接.includes('@@'):\\n                            json = {\\n                                type: 分类链接.split('@@')[0],\\n                                value: pdfh(item, 分类链接.split('@@')[1]),\\n                            }\\n                            break;\\n                        default:\\n                            json = pd(item, 分类链接);\\n                            break;\\n                    }\\n                    /*var json=分类链接.includes('@@@')?{\\n                         type:pdfh(item,分类链接.split('@@@')[0]),\\n                         value:pdfh(item,分类链接.split('@@@')[1]),\\n                     }:pd(item,分类链接);\\n                     \\n                     json=分类链接.includes('@@')?{\\n                         type:分类链接.split('@@')[0],\\n                         value:pdfh(item,分类链接.split('@@')[1]),\\n                     }:pd(item,分类链接);*/\\n\\n                }\\n\\n                let params = {\\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\\n                }\\n                cates.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.cate_temp[params.index] = params.key.toString();\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                        if (params.json.constructor === Object) {\\n                            putMyVar('dt_' + params.json.type, params.json.value);\\n                        } else {\\n                            putMyVar(params.state, params.json);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params),\\n                    col_type: 'scroll_button',\\n                    extra: {\\n                        cls: MY_RULE.title + 'cate_button',\\n                    }\\n                });\\n            });\\n            cates.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    cls: MY_RULE.title + 'cate_button',\\n                }\\n            });\\n        }\\n    })\\n}\\n\\n\\nif (fold === \\\"1\\\" || 折叠状态 == false) {\\n    items = items.concat(cates);\\n}\\nif (fold === \\\"0\\\") {\\n    storage0.putMyVar('cate_button', cates)\\n}\\nif(cates.length==0){\\n     putMyVar('cate_empty','empty');\\n}else{\\n     putMyVar('cate_empty','noempty');\\n}\\n\\nif (typeof setPreResult != 'undefined'&&_动态返回) {\\n    items = d.concat(items);\\n    //清空继承数组\\n    d.length = 0;\\n    setPreResult(items);\\n} else {\\n    items.forEach(item => {\\n        d.push(item);\\n    })\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"二级设置\",\"path\":\"erji\",\"rule\":\"js:\\nvar d = [];\\nconst page = MY_PAGE;\\naddListener(\\\"onClose\\\", $.toString(() => {clearMyVar('mod'); })  );\\nd.push({title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"请输入播放详情地址，如https://www.cz0101.com/movie/20271.html\\\",\\n    pic_url: \\\"\\\",extra: {type: \\\"textarea\\\",height: 2,highlight: true,titleVisible: false,\\n        onChange: $.toString(() => {putMyVar(\\\"rule\\\", input);}),\\n        defaultValue: getMyVar(\\\"rule\\\", \\\"\\\")   }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"播放链接补全，大部分缺少域名，能播放就不需要\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"bq\\\", input); }),\\n        defaultValue: getMyVar(\\\"bq\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"海报标题\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r3\\\", input); }),\\n        defaultValue: getMyVar(\\\"r3\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"海报描述\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r4\\\", input); }),\\n        defaultValue: getMyVar(\\\"r4\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"海报图片\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r5\\\", input); }),\\n        defaultValue: getMyVar(\\\"r5\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"视频简介\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r6\\\", input); }),\\n        defaultValue: getMyVar(\\\"r6\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"播放线路\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r7\\\", input); }),\\n        defaultValue: getMyVar(\\\"r7\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"线路名称\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r8\\\", input); }),\\n        defaultValue: getMyVar(\\\"r8\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"播放列表\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r9\\\", input); }),\\n        defaultValue: getMyVar(\\\"r9\\\", \\\"\\\")    }\\n});\\nd.push({\\n    title: \\\"\\\",url: \\\"\\\",col_type: \\\"input\\\",desc: \\\"列表名称\\\",pic_url: \\\"\\\",\\n    extra: {titleVisible: false,onChange: $.toString(() => {\\n            putMyVar(\\\"r10\\\", input); }),\\n        defaultValue: getMyVar(\\\"r10\\\", \\\"\\\")    }\\n});\\nvar mod = getMyVar(\\\"mod\\\", \\\"\\\");\\nd.push({\\n    // 预览按钮：进入预览模式\\n    title: '预览',\\n    col_type: 'text_3',\\n    url: $('#noLoading#').lazyRule(() => {\\n      putMyVar('mod', 'Pre'); // 设置模式为预览\\n      refreshPage()\\n      return 'toast://预览'})\\n  }, {\\n    // 取消按钮：退出预览模式\\n    title: '取消预览',\\n    col_type: 'text_3',\\n    url: $('#noLoading#').lazyRule(() => {\\n      clearMyVar('mode')\\n      refreshPage()\\n      return 'toast://取消预览' })\\n  })\\nd.push({\\n    title: \\\"来个示例\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n    putMyVar(\\\"rule\\\", \\\"https://www.laodifang.tv/voddetail/218874.html\\\");\\n    putMyVar(\\\"bq\\\", \\\"https://www.laodifang.tv\\\");\\n    putMyVar(\\\"r3\\\", \\\"h2&&Text\\\");    \\n\\t\\t   putMyVar(\\\"r4\\\", \\\".data,3&&Text\\\");\\n\\t\\t  \\tputMyVar(\\\"r5\\\", \\\".content_thumb&&a&&data-original\\\");\\n\\t\\t  \\tputMyVar(\\\"r6\\\",\\\".desc&&Text\\\");\\n\\t\\t  \\tputMyVar(\\\"r7\\\", \\\"#NumTab&&a\\\");\\n\\t\\t  \\tputMyVar(\\\"r8\\\", \\\"a&&alt\\\");\\n\\t\\t  \\tputMyVar(\\\"r9\\\",\\\"body&&.content_playlist\\\" );\\n\\t\\t  \\tputMyVar(\\\"r10\\\", \\\"body&&a\\\");\\n        refreshPage();\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_3\\\",\\n    desc: \\\"\\\",\\n    pic_url: \\\"\\\"\\n});\\n\\nif (mod == 'Pre') {\\nvar url_prefix = getMyVar(\\\"bq\\\", \\\"\\\");\\nvar url = getMyVar(\\\"rule\\\", \\\"\\\");\\nvar 标题= getMyVar(\\\"r3\\\", );\\nvar 描述 = getMyVar(\\\"r4\\\", \\\"\\\") ;\\nvar 图片 =getMyVar(\\\"r5\\\", \\\"\\\");\\nvar 简介 = getMyVar(\\\"r6\\\", \\\"\\\") ;\\nvar 线路列表 = getMyVar(\\\"r7\\\", \\\"\\\") ;\\nvar 线路列表名称 = getMyVar(\\\"r8\\\", \\\"\\\");\\nvar 播放列表 = getMyVar(\\\"r9\\\", \\\"\\\") ;\\nvar 播放列表名称 = getMyVar(\\\"r10\\\", \\\"\\\") ;\\nvar html = fetch(url);\\neval(JSON.parse(request('hiker://page/lazy')).rule);\\nvar getRangeColors = function() { return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6); }  \\nvar title = pdfh(html, 标题);\\nvar desc=pd(html, 描述);\\nvar pic = pd(html, 图片);\\nvar intro = pdfh(html, 简介);\\nvar arts = pdfa(html,线路列表);\\nvar tabs = [];for (var i in arts) {tabs.push(pdfh(arts[i], 线路列表名称))};\\nvar conts = pdfa(html, 播放列表);\\nvar lists = [];for (var i in conts) {lists.push(pdfa(conts[i], 播放列表名称))};\\nlet line_model = 8;\\nlet line_type_model = 'blank_block';\\n\\nd.push({\\n  title: title ,desc:desc,\\n   pic_url: pic,\\n\\turl: pic ,\\n  \\tcol_type: 'movie_1_vertical_pic_blur',\\n\\textra: {gradient: true}});\\nd.push({//简介\\n  title: '‘‘’’' + '簡介：'.fontcolor(\\\"#1e90ff\\\").bold() + intro.substr(0, 55).small() + '...詳情'.fontcolor(\\\"red\\\").small(),\\n    url: 'hiker://empty##noHistory#' + '\\\\n' + intro + `@rule=js:var res = {}; var d = [];d.push({title:'劇情簡介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\n    col_type: 'text_1'});\\nfor (let i = 0; i < line_model; i++) { d.push({col_type: line_type_model})  }\\t\\n//线路列表\\nfunction setTabs(tabs, vari) {\\n    d.push({\\n        title: (getVar('shsort') == '1') ? '‘‘’’<b><span style=\\\"color: #9370db\\\">⇩</span></b>' : '‘‘’’<b><span style=\\\"color: #ffbf00\\\">⇧</span></b>',\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切換排序成功'`,\\n        col_type: 'scroll_button',\\n          })\\n    for (var i = 0; i < tabs.length; i++) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切換成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? '‘‘’’<b><span style=\\\"color: #ffffff\\\">' + tabs[i] + '</span></b>' : tabs[i],\\n            url: url,\\n            col_type: 'scroll_button',\\n            extra: {'backgroundColor': getVar(vari, '0') == i ? getRangeColors() : ''}\\n            })\\n         }d.push({col_type: 'line'});\\n}\\n \\n//播放列表\\nfunction setLists(lists, index) {\\n    var list = lists[index];\\n    if (getVar('shsort') == '1') {\\n        var list = lists[index].reverse();\\n    }\\n    for (var j in list) {\\n\\n        d.push({\\n            title: '‘‘’’' + pdfh(list[j], 'a&&Text')\\n                .replace(/第(\\\\d+)集/, '$1')\\n                .replace('第', '')\\n                .replace('期', '').small(),\\n            url:  url_prefix+pdfh(list[j], 'a&&href')+lazy,\\n            col_type: list.length > 3 ? 'text_4' : 'text_2',\\n            \\n        });\\n    }\\n}\\n  setTabs(tabs, MY_URL);\\n  setLists(lists, getVar(MY_URL, '0'));\\n  \\n}\\nd.push({\\n    col_type: 'big_big_blank_block'\\n});\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级页面\",\"path\":\"detail\",\"rule\":\"js:\\nvar d = [];\\nvar split_urls = [getParam('actual_url')]\\nvar html = fetch(split_urls[0])\\nlet url_prefix=MY_PARAMS.data.bq\\nconst 标题= MY_PARAMS.data.bt\\nconst 描述 = MY_PARAMS.data.ms\\nconst 图片 = MY_PARAMS.data.tp\\nconst 简介 = MY_PARAMS.data.jj\\nconst 线路列表 = MY_PARAMS.data.xllb\\nconst 线路列表名称 = MY_PARAMS.data.xllbmc\\nconst 播放列表 = MY_PARAMS.data.bflb\\nconst 播放列表名称 = MY_PARAMS.data.bflbmc\\neval(JSON.parse(request('hiker://page/lazy')).rule);\\nvar getRangeColors = function() { return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6); }\\nvar title = pdfh(html, 标题)\\nvar desc=pd(html, 描述)\\nvar pic = pd(html, 图片)\\nvar intro = pdfh(html, 简介)\\nvar arts = pdfa(html,线路列表);\\nvar tabs = [];for (var i in arts) {tabs.push(pdfh(arts[i], 线路列表名称))}\\nvar conts = pdfa(html, 播放列表);\\nvar lists = [];for (var i in conts) {lists.push(pdfa(conts[i], 播放列表名称))}\\nlet line_model = 8;\\nlet line_type_model = 'blank_block';\\nd.push({\\n  title: title ,desc: desc,\\n   pic_url: pic,\\n\\turl: pic ,\\n\\tcol_type: 'movie_1_vertical_pic_blur',\\n\\textra: {gradient: true}});\\n\\nd.push({//简介\\n  title: '‘‘’’' + '簡介：'.fontcolor(\\\"#1e90ff\\\").bold() + intro.substr(0, 55).small() + '...詳情'.fontcolor(\\\"red\\\").small(),\\n    url: 'hiker://empty##noHistory#' + '\\\\n' + intro + `@rule=js:var res = {}; var d = [];d.push({title:'劇情簡介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\n    col_type: 'text_1'});\\nfor (let i = 0; i < line_model; i++) { d.push({col_type: line_type_model})  }\\t\\n//线路列表\\n\\nfunction setTabs(tabs, vari) {\\n   try {\\n    d.push({\\n        title: (getVar('shsort') == '1') ? '‘‘’’<b><span style=\\\"color: #9370db\\\">⇩</span></b>' : '‘‘’’<b><span style=\\\"color: #ffbf00\\\">⇧</span></b>',\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切換排序成功'`,\\n        col_type: 'scroll_button',\\n    })\\n    for (var i = 0; i < tabs.length; i++) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切換成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? '‘‘’’<b><span style=\\\"color: #ffffff\\\">' + tabs[i] + '</span></b>' : tabs[i],\\n            url: url,\\n\\n            col_type: 'scroll_button',\\n            extra: {\\n                'backgroundColor': getVar(vari, '0') == i ? getRangeColors() : ''\\n            }\\n        })\\n    }\\n    d.push({\\n        col_type: 'line'});\\n\\t  } catch (e) {\\n        log(\\\"setTabs错误: \\\" + e.toString());\\n        d.push({ title: '标签生成失败', col_type: \\\"text_center_1\\\" });\\n    }\\n}\\n\\n  \\n//播放列表\\nfunction setLists(lists, index) {\\n   try {\\n    var list = lists[index];\\n    if (getVar('shsort') == '1') {\\n        var list = lists[index].reverse();\\n    }\\n    for (var j in list) {\\n\\n        d.push({\\n            title: '‘‘’’' + pdfh(list[j], 'a&&Text')\\n                .replace(/第(\\\\d+)集/, '$1')\\n                .replace('第', '')\\n                .replace('期', '').small(),\\n            url:  url_prefix+pdfh(list[j], 'a&&href')+lazy,\\n            col_type: list.length > 3 ? 'text_4' : 'text_2',\\n               });\\n    }\\n\\t // 处理空列表情况\\n        if (list.length === 0) {\\n            d.push({ title: '‘‘当前分类无播放项’’', col_type: \\\"text_center_1\\\" });\\n        }\\n    } catch (e) {\\n        log(\\\"setLists错误: \\\" + e.toString());\\n        d.push({ title: '播放列表生成失败', col_type: \\\"text_center_1\\\" });\\n    } \\n}\\n\\n\\n\\n\\n\\nsetTabs(tabs, MY_URL);\\nsetLists(lists, getVar(MY_URL, '0'));\\nd.push({col_type: 'line_blank'})\\t\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"lazy\",\"path\":\"lazy\",\"rule\":\"var lazy = $('').lazyRule(() => {\\n    try {\\n        function toUrl(playUrl) {\\n            if (/mgtv|sohu/.test(playUrl)) {\\n                return playUrl + \\\";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\\\";\\n            } else if (/bili/.test(playUrl)) {\\n                return playUrl + \\\";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\\\";\\n            } else if (/ixigua/.test(playUrl)) {\\n                return playUrl + \\\"#isVideo=true#\\\" + \\\"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\\\";\\n            } else {\\n                return playUrl;\\n            }\\n        }\\n\\n        var html = request(input, {});\\n        var player_data = JSON.parse(html.match(/r player_.*?=(.*?)</)[1]);\\n        var fro = player_data.from;\\n        var playUrl = player_data.url;\\n\\n\\n        if (player_data.encrypt == '1') {\\n            playUrl = unescape(player_data.url);\\n        } else if (player_data.encrypt == '2') {\\n            playUrl = unescape(base64Decode(player_data.url));\\n        };\\n        var exclude = /playm3u8|m3u8\\\\.tv|min\\\\.css|404\\\\.m3u8|\\\\.css/;\\n        var contain = /\\\\.mp4|\\\\.m3u8|\\\\.flv|\\\\.avi|\\\\.mpeg|\\\\.wmv|\\\\.mov|\\\\.rmvb|\\\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\\n        if (!exclude.test(playUrl) && contain.test(playUrl)) {\\n            return toUrl(playUrl);\\n        }\\n\\n        var jxUrl = '';\\n        var jxHtml = request(jxUrl, {\\n            headers: {\\n                \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0)\\\"\\n            },\\n            method: \\\"GET\\\"\\n        });\\n        eval(jxHtml.match(/var config = {[\\\\s\\\\S]*?}/)[0] + \\\"\\\");\\n        var apiUrl = '';\\n        var apiHtml = request(apiUrl, {\\n            headers: {\\n                \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0)\\\"\\n            },\\n            body: \\\"url=\\\" + config.url + \\\"&time=\\\" + config.time + \\\"&key=\\\" + config.key,\\n            method: \\\"POST\\\"\\n        });\\n        var json = JSON.parse(apiHtml);\\n        if (json.code == 200) {\\n            playUrl = json.url;\\n            return toUrl(playUrl);\\n        } else {\\n            return 'toast://' + json.msg;\\n        }\\n\\n    } catch (e) {\\n        //setError(e);\\n        showLoading(\\\"正在进行检索，请稍候...\\\");\\n        var video = 'x5Rule://' + input + '@' + $.toString(() => {\\n            //fba.log(fba.getUrls())\\n            var urls = _getUrls()\\n            var exclude = /playm3u8|m3u8\\\\.tv|min\\\\.css|404\\\\.m3u8|\\\\.css/;\\n            var contain = /\\\\.mp4|\\\\.m3u8|\\\\.flv|\\\\.avi|\\\\.mpeg|\\\\.wmv|\\\\.mov|\\\\.rmvb|\\\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\\n            for (var i in urls) {\\n                if (!exclude.test(urls[i]) && contain.test(urls[i])) {\\n                    // fy_bridge_app.log(urls[i])\\n                    if (/mgtv|sohu/.test(urls[i])) {\\n                        return urls[i] + \\\";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\\\";\\n                    } else if (/bili/.test(urls[i])) {\\n                        return urls[i] + \\\";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\\\";\\n                    } else if (/ixigua/.test(urls[i])) {\\n                        return urls[i] + \\\"#isVideo=true#\\\" + \\\"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\\\";\\n                    } else {\\n                        return urls[i]\\n                    }\\n                }\\n            }\\n        });\\n        return video;\\n    }\\n});\"}]","icon":"hiker://images/home_icon_code","proxy":""}